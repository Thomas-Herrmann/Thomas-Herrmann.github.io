name: bytestring
version: 0.10.8.2
id: bytestring-0.10.8.2
key: K7Dy43JCLnVL7JdPi7Gi43
license: BSD3
copyright: Copyright (c) Don Stewart          2005-2009,
           (c) Duncan Coutts        2006-2015,
           (c) David Roundy         2003-2005,
           (c) Jasper Van der Jeugt 2010,
           (c) Simon Meier          2010-2013.
maintainer: Duncan Coutts <duncan@community.haskell.org>
homepage: https://github.com/haskell/bytestring
synopsis: Fast, compact, strict and lazy byte strings with a list interface
description:
    An efficient compact, immutable byte string type (both strict and lazy)
    suitable for binary or 8-bit character data.
    .
    The 'ByteString' type represents sequences of bytes or 8-bit characters.
    It is suitable for high performance use, both in terms of large data
    quantities, or high speed requirements. The 'ByteString' functions follow
    the same style as Haskell\'s ordinary lists, so it is easy to convert code
    from using 'String' to 'ByteString'.
    .
    Two 'ByteString' variants are provided:
    .
    * Strict 'ByteString's keep the string as a single large array. This
    makes them convenient for passing data between C and Haskell.
    .
    * Lazy 'ByteString's use a lazy list of strict chunks which makes it
    suitable for I\/O streaming tasks.
    .
    The @Char8@ modules provide a character-based view of the same
    underlying 'ByteString' types. This makes it convenient to handle mixed
    binary and 8-bit character content (which is common in many file formats
    and network protocols).
    .
    The 'Builder' module provides an efficient way to build up 'ByteString's
    in an ad-hoc way by repeated concatenation. This is ideal for fast
    serialisation or pretty printing.
    .
    There is also a 'ShortByteString' type which has a lower memory overhead
    and can can be converted to or from a 'ByteString', but supports very few
    other operations. It is suitable for keeping many short strings in memory.
    .
    'ByteString's are not designed for Unicode. For Unicode strings you should
    use the 'Text' type from the @text@ package.
    .
    These modules are intended to be imported qualified, to avoid name clashes
    with "Prelude" functions, e.g.
    .
    > import qualified Data.ByteString as BS
category: Data
author: Don Stewart,
        Duncan Coutts
exposed: True
exposed-modules:
    Data.ByteString Data.ByteString.Char8 Data.ByteString.Unsafe
    Data.ByteString.Internal Data.ByteString.Lazy
    Data.ByteString.Lazy.Char8 Data.ByteString.Lazy.Internal
    Data.ByteString.Short Data.ByteString.Short.Internal
    Data.ByteString.Builder Data.ByteString.Builder.Extra
    Data.ByteString.Builder.Prim Data.ByteString.Builder.Internal
    Data.ByteString.Builder.Prim.Internal Data.ByteString.Lazy.Builder
    Data.ByteString.Lazy.Builder.Extras
    Data.ByteString.Lazy.Builder.ASCII
hidden-modules: Data.ByteString.Builder.ASCII
                Data.ByteString.Builder.Prim.Binary
                Data.ByteString.Builder.Prim.ASCII
                Data.ByteString.Builder.Prim.Internal.Floating
                Data.ByteString.Builder.Prim.Internal.UncheckedShifts
                Data.ByteString.Builder.Prim.Internal.Base16
trusted: False
import-dirs: ${pkgroot}\bytestring-0.10.8.2-K7Dy43JCLnVL7JdPi7Gi43
library-dirs: ${pkgroot}\bytestring-0.10.8.2-K7Dy43JCLnVL7JdPi7Gi43
data-dir: C:\Users\valderman\AppData\Roaming\haste-cabal\x86_64-windows-haste-0.6.0.0-ghc-7.10.2\bytestring-0.10.8.2
hs-libraries: HSbytestring-0.10.8.2-K7Dy43JCLnVL7JdPi7Gi43
include-dirs: ${pkgroot}\include
includes:
    fpstring.h
depends:
    base-4.8.0.0 deepseq-1.4.3.0 ghc-prim-0.4.0.0 integer-gmp-0.5.0.0
haddock-interfaces: ${pkgroot}\bytestring-0.10.8.2\html\bytestring.haddock
haddock-html: ${pkgroot}\bytestring-0.10.8.2\html
